{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#skylog-sdk","title":"SkyLog SDK","text":"<ul> <li>Github repository: https://github.com/vahidtwo/skylog-sdk/</li> <li>Documentation https://vahidtwo.github.io/skylog-sdk/</li> </ul>"},{"location":"#python-sdk-for-skylog-integration","title":"Python SDK for Skylog Integration","text":"<p>Skylog is a robust service designed for seamless integration with various platforms like Sentry, Telegram, and more, enabling the efficient transmission of logs and rapid identification of issues.</p> <p>This Python SDK facilitates easy interaction with Skylog services, allowing users to:</p> <ul> <li>fire alert</li> <li>stop alert</li> <li>notify</li> </ul>"},{"location":"#how-to-install","title":"How to install","text":"<p>install from gitlab</p> <pre><code>pip install skylog-sdk\n</code></pre>"},{"location":"#setup-and-configuration","title":"Setup and Configuration","text":"<ul> <li> <p>Environment Variables: Configure the following variables in your project environment:</p> </li> <li> <p><code>DEFAULT_SKY_LOG_ALERTING_TELEGRAM_ALERT_NAME</code>: Default alert name for Telegram</p> </li> <li><code>DEFAULT_SKY_LOG_ALERTING_PHONE_CALL_ALERT_NAME</code>: Default alert name for phone calls</li> <li><code>DEFAULT_SKY_LOG_ALERTING_SMS_ALERT_NAME</code>: Default alert name for SMS</li> <li><code>SKY_LOG_BASE_URL</code>: Base URL for Skylog API calls</li> <li><code>SKY_LOG_ALERTING_TOKEN</code>: Your Skylog authentication token</li> </ul> <p>Proxy Configuration</p> <p>If you want to use proxy, include the following additional variables:</p> <pre><code>- `PROXY_USERNAME`\n- `PROXY_PASSWORD`\n- `PROXY_IP`\n- `PROXY_PORT`\n</code></pre> <p>Usage Example</p> SimpleAdvance <p> <pre><code>  from skylog import AlertingSkyLogClient, AlertingProvider\n\n  AlertingProvider(telegram='telegram_rule')\n  # Initialize the Skylog client with the desired provider (e.g., Telegram)\n  client = AlertingSkyLogClient(default_provider=AlertingProvider.telegram)\n  client.fire_alert(description='Issue detected', instance_name='unique_key', provider=AlertingProvider.sms)\n  client.stop_alert(description='Issue resolved', instance_name='unique_key', provider=AlertingProvider.sms)\n  client.notify(description='Alert notification', instance_name='unique_key', provider=AlertingProvider.telegram)\n</code></pre> </p> <p> <pre><code>from skylog import AlertingSkyLogClient, AlertingProvider\nfrom skylog.integration.config import ClientSettings, LazySettings\n\nclass CustomSettings(ClientSettings):\n    ... # some settings\n\nsettings = LazySettings(client_settings_class=CustomSettings)\n\nAlertingProvider(telegram='telegram_rule')\n# Initialize the Skylog client with the desired provider (e.g., Telegram)\nclient = AlertingSkyLogClient(\n  default_provider=AlertingProvider.telegram,\n  use_proxy=True,\n  settings=settings,\n  enable=False, # not send data just log data\n  duplicate_request_message='duplicate' # this is the skylog message when get duplicate instance-name\n)\nclient.fire_alert(\n  description='Issue detected',\n  instance_name='unique_key',\n  provider=AlertingProvider.sms,\n  notify_on_duplicate=True # if got duplicate message from skylog send notify msg\n)\nclient.stop_alert(description='Issue resolved', instance_name='unique_key', provider=AlertingProvider.sms)\nclient.notify(description='Alert notification', instance_name='unique_key', provider=AlertingProvider.telegram)\n</code></pre> </p>"},{"location":"#concepts-to-understand","title":"Concepts to Understand","text":""},{"location":"#alertname-and-instance","title":"Alertname and Instance","text":"<ul> <li>Alertname: Represents the provider or service. It identifies where Skylog sends alerts.</li> <li>Instance: A unique identifier within a group alert, specifying a particular part of a universal alert.</li> </ul>"},{"location":"#alerts-management","title":"Alerts Management","text":"<ul> <li>Firing an Alert: Triggering an alert, resulting in immediate notifications sent to relevant endpoints.</li> <li>Stopping an Alert: Removing a fired alert, resolving it and stopping further notifications.</li> <li>Notifying an Alert: Sending messages to endpoints without adding records to the triggered list.</li> </ul>"}]}